# generated by datamodel-codegen:
#   filename:  game_setup.json
#   timestamp: 2022-09-04T05:04:28+00:00

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, Field


class GameSetup(BaseModel):
    gameType: str = Field(..., description='Type of game')
    arenaWidth: int = Field(..., description='Width of arena measured in units')
    isArenaWidthLocked: bool = Field(
        ...,
        description='Flag specifying if the width of arena is fixed for this game type',
    )
    arenaHeight: int = Field(..., description='Height of arena measured in units')
    isArenaHeightLocked: bool = Field(
        ...,
        description='Flag specifying if the height of arena is fixed for this game type',
    )
    minNumberOfParticipants: int = Field(
        ..., description='Minimum number of bots participating in battle'
    )
    isMinNumberOfParticipantsLocked: bool = Field(
        ...,
        description='Flag specifying if the minimum number of bots participating in battle is fixed for this game type',
    )
    maxNumberOfParticipants: Optional[int] = Field(
        None, description='Maximum number of bots participating in battle'
    )
    isMaxNumberOfParticipantsLocked: bool = Field(
        ...,
        description='Flag specifying if the maximum number of bots participating in battle is fixed for this game type',
    )
    numberOfRounds: int = Field(..., description='Number of rounds in battle')
    isNumberOfRoundsLocked: bool = Field(
        ...,
        description='Flag specifying if the number-of-rounds is fixed for this game type',
    )
    gunCoolingRate: float = Field(
        ...,
        description='Gun cooling rate. The gun needs to cool down to a gun heat of zero before the gun is able to fire',
    )
    isGunCoolingRateLocked: bool = Field(
        ...,
        description='Flag specifying if the gun cooling rate is fixed for this game type',
    )
    maxInactivityTurns: Optional[int] = Field(
        None,
        description='Maximum number of inactive turns allowed, where a bot does not take any action before it is zapped by the game',
    )
    isMaxInactivityTurnsLocked: Optional[bool] = Field(
        None,
        description='Flag specifying if the inactive turns is fixed for this game type',
    )
    turnTimeout: int = Field(
        ...,
        description="Turn timeout in microseconds (1 / 1,000,000 second) for sending intent after having received 'tick' message",
    )
    isTurnTimeoutLocked: bool = Field(
        ...,
        description='Flag specifying if the turn timeout is fixed for this game type',
    )
    readyTimeout: int = Field(
        ...,
        description="Time limit in microseconds (1 / 1,000,000 second) for sending ready message after having received 'game started' message",
    )
    isReadyTimeoutLocked: bool = Field(
        ...,
        description='Flag specifying if the ready timeout is fixed for this game type',
    )
    defaultTurnsPerSecond: int = Field(
        ..., description='Default number of turns to show per second for an observer/UI'
    )
